/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Testing;

import control.DatabaseManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;

/**
 *
 * @author Paul
 */
public class TestingGUI extends javax.swing.JFrame {
    private JTable curr;
    private DatabaseManager dbm;
    /**
     * Creates new form TestingGUI
     */
    public TestingGUI(DatabaseManager m) {
        initComponents();
        curr = null;
        dbm = m;
        setLocationRelativeTo(null);
    }
    public void addTable(JTable theTable) {
        if (curr != null)
            ScrollPane.getViewport().remove(curr);
        theTable.setFillsViewportHeight(true);
        ScrollPane.getViewport().add(theTable);
        curr = theTable;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ScrollPane = new javax.swing.JScrollPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("4");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("5");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("6");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("7");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("8");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("9");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("10");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(jButton7)
                    .addComponent(jButton8)
                    .addComponent(jButton9)
                    .addComponent(jButton10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ResultSet rs = null;
        try {
            rs = dbm.executeQuery("select FirstName, LastName, Street, City, State, customers.ZIPCODE, Phone, Num_Orders\n" +
"    from Customers inner join zip on (customers.zipcode = zip.zipcode)\n" +
"				   inner join (select customerID, count(orderid) as Num_Orders from orders group by customerID)\n" +
"                   as NumOrders on NumOrders.customerID = Customers.customerID;");
        } catch (SQLException ex) {
            Logger.getLogger(TestingGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        JTable testTable = null;
        if (rs != null) {
            
            try {
                testTable = dbm.createTable(rs);
                testTable.setAutoCreateRowSorter(true);
                System.out.println("TABLE CREATED");
            } catch (SQLException ex) {
                Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (testTable != null) {
                this.addTable(testTable);
                System.out.println("TABLE ADDED");
                revalidate();
                repaint();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        ResultSet rs = null;
        try {
            rs = dbm.executeQuery("select LocationID, LocationName, NumOrders\n" +
"    from storelocations\n" +
"    natural join (select locationID, count(locationId) as NumOrders from orders group by locationID) as counts;");
        } catch (SQLException ex) {
            Logger.getLogger(TestingGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        JTable testTable = null;
        if (rs != null) {
            
            try {
                testTable = dbm.createTable(rs);
                testTable.setAutoCreateRowSorter(true);
                System.out.println("TABLE CREATED");
            } catch (SQLException ex) {
                Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (testTable != null) {
                this.addTable(testTable);
                System.out.println("TABLE ADDED");
                revalidate();
                repaint();
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ResultSet rs = null;
        try {
            rs = dbm.executeQuery("select customerid, orderid, totalcost\n" +
"	from orders\n" +
"	where totalcost > all(select avg(totalCost) from orders group by customerid)\n" +
"	order by CustomerID;");
        } catch (SQLException ex) {
            Logger.getLogger(TestingGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        JTable testTable = null;
        if (rs != null) {
            
            try {
                testTable = dbm.createTable(rs);
                testTable.setAutoCreateRowSorter(true);
                System.out.println("TABLE CREATED");
            } catch (SQLException ex) {
                Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (testTable != null) {
                this.addTable(testTable);
                System.out.println("TABLE ADDED");
                revalidate();
                repaint();
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        ResultSet rs = null;
        try {
            rs = dbm.executeQuery("SELECT CustomerId, FirstName, LastName, orderID, DeliveryDate\n" +
"	FROM (select * from ORDERS natural join delivery natural join (select CustomerID, FirstName, LastName from customers) as CustInfo) as OUTERTABLE\n" +
"	WHERE (DeliveryDate) = (SELECT MIN(DeliveryDate) \n" +
"							FROM (select * from Orders natural join Delivery) as innertable\n" +
"							WHERE innertable.CUSTOMERID = OUTERTABLE.CUSTOMERID\n" +
"							GROUP BY CUSTOMERID)");
        } catch (SQLException ex) {
            Logger.getLogger(TestingGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        JTable testTable = null;
        if (rs != null) {
            
            try {
                testTable = dbm.createTable(rs);
                testTable.setAutoCreateRowSorter(true);
                System.out.println("TABLE CREATED");
            } catch (SQLException ex) {
                Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (testTable != null) {
                this.addTable(testTable);
                System.out.println("TABLE ADDED");
                revalidate();
                repaint();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        ResultSet rs = null;
        try {
            rs = dbm.executeQuery("select orders.OrderID, product.ProductName, order_item.quantity, product.UnitPrice, order_item.SubTotalCost, orders.TotalCost  from\n" +
"    orders left outer join order_item on (orders.OrderID = order_item.OrderID)\n" +
"    right outer join product on (order_item.ProductID = product.ProductID)\n" +
"    order by orders.OrderID");
        } catch (SQLException ex) {
            Logger.getLogger(TestingGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        JTable testTable = null;
        if (rs != null) {
            
            try {
                testTable = dbm.createTable(rs);
                testTable.setAutoCreateRowSorter(true);
                System.out.println("TABLE CREATED");
            } catch (SQLException ex) {
                Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (testTable != null) {
                this.addTable(testTable);
                System.out.println("TABLE ADDED");
                revalidate();
                repaint();
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        ResultSet rs = null;
        try {
            rs = dbm.executeQuery("(SELECT o.OrderID, c.CustomerID, o.TotalCost, z.State\n" +
"	FROM orders AS o\n" +
"	JOIN customers AS c ON o.CustomerID = c.CustomerID\n" +
"	JOIN zip AS z ON c.ZIPCODE = z.ZIPCODE\n" +
"	WHERE z.State = 'UT')\n" +
"\n" +
"	UNION\n" +
"\n" +
"	(SELECT o.OrderID, c.CustomerID, o.TotalCost, z.State\n" +
"	FROM orders AS o\n" +
"	JOIN customers AS c ON o.CustomerID = c.CustomerID\n" +
"	JOIN zip AS z ON c.ZIPCODE = z.ZIPCODE\n" +
"	WHERE z.State = 'TX');");
        } catch (SQLException ex) {
            Logger.getLogger(TestingGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        JTable testTable = null;
        if (rs != null) {

            try {
                testTable = dbm.createTable(rs);
                testTable.setAutoCreateRowSorter(true);
                System.out.println("TABLE CREATED");
            } catch (SQLException ex) {
                Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (testTable != null) {
                this.addTable(testTable);
                System.out.println("TABLE ADDED");
                revalidate();
                repaint();
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        ResultSet rs = null;
        try {
            rs = dbm.executeQuery("select customers.customerid, customers.FirstName, customers.LastName, sum(orders.TotalCost) as SumOfOrders\n" +
"	from Customers left outer join orders on customers.customerid=orders.customerid\n" +
"	group by customers.customerid;");
        } catch (SQLException ex) {
            Logger.getLogger(TestingGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        JTable testTable = null;
        if (rs != null) {
            
            try {
                testTable = dbm.createTable(rs);
                testTable.setAutoCreateRowSorter(true);
                System.out.println("TABLE CREATED");
            } catch (SQLException ex) {
                Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (testTable != null) {
                this.addTable(testTable);
                System.out.println("TABLE ADDED");
                revalidate();
                repaint();
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        ResultSet rs = null;
        try {
            rs = dbm.executeQuery("select concat(LastName,\", \",FirstName) as Name, Email, Phone, OrderID, OrderDate, TotalCost, OrderStatus\n" +
"    from customers left outer join orders on (customers.CustomerID = orders.CustomerID) where OrderStatus = \"PENDING PAYMENT\"\n" +
"    order by customers.CustomerID;");
        } catch (SQLException ex) {
            Logger.getLogger(TestingGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        JTable testTable = null;
        if (rs != null) {
            
            try {
                testTable = dbm.createTable(rs);
                testTable.setAutoCreateRowSorter(true);
                System.out.println("TABLE CREATED");
            } catch (SQLException ex) {
                Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (testTable != null) {
                this.addTable(testTable);
                System.out.println("TABLE ADDED");
                revalidate();
                repaint();
            }
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        ResultSet rs = null;
        try {
            rs = dbm.executeQuery("SELECT c.FirstName, c.LastName, o.OrderID, d.DeliveryStatus, z.City\n" +
"	FROM customers c\n" +
"	JOIN orders o ON c.CustomerID = o.CustomerID\n" +
"	JOIN delivery d ON d.DeliveryID = o.DeliveryID\n" +
"	JOIN zip z ON z.ZIPCODE = c.ZIPCODE;");
        } catch (SQLException ex) {
            Logger.getLogger(TestingGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        JTable testTable = null;
        if (rs != null) {
            
            try {
                testTable = dbm.createTable(rs);
                testTable.setAutoCreateRowSorter(true);
                System.out.println("TABLE CREATED");
            } catch (SQLException ex) {
                Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (testTable != null) {
                this.addTable(testTable);
                System.out.println("TABLE ADDED");
                revalidate();
                repaint();
            }
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        ResultSet rs = null;
        try {
            rs = dbm.executeQuery("SELECT prd.ProductName, prt.PartName, v.VendorName\n" +
"	FROM product AS prd\n" +
"	JOIN productparts AS prdp ON prdp.ProductID = prd.ProductID\n" +
"	JOIN parts AS prt ON prt.PartNumber = prdp.PartNumber\n" +
"	JOIN vendors AS v ON v.VendorID = prt.VendorID;");
        } catch (SQLException ex) {
            Logger.getLogger(TestingGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        JTable testTable = null;
        if (rs != null) {
            
            try {
                testTable = dbm.createTable(rs);
                testTable.setAutoCreateRowSorter(true);
                System.out.println("TABLE CREATED");
            } catch (SQLException ex) {
                Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (testTable != null) {
                this.addTable(testTable);
                System.out.println("TABLE ADDED");
                revalidate();
                repaint();
            }
        }
    }//GEN-LAST:event_jButton10ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollPane;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    // End of variables declaration//GEN-END:variables
}
